-- Create the maelstrom database procedures and functions.
-- PostgreSQL 16

CREATE OR REPLACE FUNCTION
select_issue_all()
RETURNS TABLE (
       iss_sysid						uuid,
       iss_identifier					varchar(16),
       iss_summary_brief				varchar(72),
       iss_summary_long					varchar(128),
       iss_problem_description		   	VARCHAR(2048),
       iss_work_around			   		VARCHAR(4096),
       iss_steps_to_reproduce		   	VARCHAR(512),
       iss_kind				   			UUID,
       iss_date_found			   		TIMESTAMP WITH TIME ZONE,
       iss_date_reported			   	TIMESTAMP WITH TIME ZONE,
       iss_date_input			   		TIMESTAMP WITH TIME ZONE,
       iss_found_by_primary			   	UUID,
       iss_found_by_team_primary		UUID,
       iss_reported_by_primary		   	UUID,
       iss_reported_by_team_primary		UUID,
       iss_input_by_primary			   	UUID,
       iss_input_by_team_primary		UUID,
       iss_severity				   		UUID,
       iss_priority				   		UUID,
       iss_organization_value		   	UUID,
       iss_current_status			   	UUID,
       iss_current_state			   	UUID,
       iss_is_resolved			   		BOOLEAN,
       iss_date_resolved			   	TIMESTAMP WITH TIME ZONE,
       iss_resolved_by_primary		   	UUID,
       iss_resolved_by_team_primary		UUID,
       iss_resolution_due_date		   	TIMESTAMP WITH TIME ZONE,
       iss_resolution_effort_unit		UUID,
       iss_resolution_effort		   	VARCHAR(10),
       iss_estimated_resolution_date	TIMESTAMP WITH TIME ZONE,
       iss_target_resolution_date		TIMESTAMP WITH TIME ZONE,
       iss_root_cause_analysis		   	VARCHAR(2048),
       iss_fix_description			   	VARCHAR(2048),
       iss_assigned_to_primary		   	UUID,
       iss_assigned_to_team_primary		UUID,
       iss_target_original_build		UUID,
       iss_estimated_original_build		UUID,
       iss_actual_original_build		UUID,
       iss_target_original_release		UUID,
       iss_estimated_original_release	UUID,
       iss_actual_original_release		UUID
)
LANGUAGE plpgsql
AS $$
DECLARE
	var_r	RECORD;
BEGIN
	FOR var_r IN (
	
	SELECT  sysid,
	        identifier,
	        summary_brief,
	        summary_long
		
	  FROM	issue
	)
	LOOP
		iss_sysid := var_r.sysid;
		iss_identifier := var_r.identifier;
		iss_summary_brief := var_r.summary_brief;
		iss_summary_long := var_r.summary_long;
		RETURN NEXT;
	END LOOP;
END;
$$;

CREATE OR REPLACE FUNCTION
select_issue_by_sysid(targ_sysid uuid)
RETURNS TABLE (
       iss_sysid						uuid,
       iss_identifier					varchar(16),
       iss_summary_brief				varchar(72),
       iss_summary_long					varchar(128),
       iss_problem_description		   	VARCHAR(2048),
       iss_work_around			   		VARCHAR(4096),
       iss_steps_to_reproduce		   	VARCHAR(512),
       iss_kind				   			UUID,
       iss_date_found			   		TIMESTAMP WITH TIME ZONE,
       iss_date_reported			   	TIMESTAMP WITH TIME ZONE,
       iss_date_input			   		TIMESTAMP WITH TIME ZONE,
       iss_found_by_primary			   	UUID,
       iss_found_by_team_primary		UUID,
       iss_reported_by_primary		   	UUID,
       iss_reported_by_team_primary		UUID,
       iss_input_by_primary			   	UUID,
       iss_input_by_team_primary		UUID,
       iss_severity				   		UUID,
       iss_priority				   		UUID,
       iss_organization_value		   	UUID,
       iss_current_status			   	UUID,
       iss_current_state			   	UUID,
       iss_is_resolved			   		BOOLEAN,
       iss_date_resolved			   	TIMESTAMP WITH TIME ZONE,
       iss_resolved_by_primary		   	UUID,
       iss_resolved_by_team_primary		UUID,
       iss_resolution_due_date		   	TIMESTAMP WITH TIME ZONE,
       iss_resolution_effort_unit		UUID,
       iss_resolution_effort		   	VARCHAR(10),
       iss_estimated_resolution_date	TIMESTAMP WITH TIME ZONE,
       iss_target_resolution_date		TIMESTAMP WITH TIME ZONE,
       iss_root_cause_analysis		   	VARCHAR(2048),
       iss_fix_description			   	VARCHAR(2048),
       iss_assigned_to_primary		   	UUID,
       iss_assigned_to_team_primary		UUID,
       iss_target_original_build		UUID,
       iss_estimated_original_build		UUID,
       iss_actual_original_build		UUID,
       iss_target_original_release		UUID,
       iss_estimated_original_release	UUID,
       iss_actual_original_release		UUID
)
LANGUAGE plpgsql
AS $$
DECLARE
	var_r	RECORD;
BEGIN
	FOR var_r IN (
	
	SELECT  sysid,
		identifier,
		summary_brief,
		summary_long

	  FROM  issue

	 WHERE  sysid = targ_sysid
	 )
	 LOOP
		iss_sysid := var_r.sysid;
		iss_identifier := var_r.identifier;
		iss_summary_brief := var_r.summary_brief;
		iss_summary_long := var_r.summary_long;
		RETURN NEXT;
	END LOOP;
END;
$$;
